import inspect
import logging
from aiogram.types import Message
from aiogram.exceptions import TelegramBadRequest

class SafeMessagePatch:
    _original_answer = None
    _patched = False

    @classmethod
    def apply_patch(cls):
        """Aplica parche global para manejar textos vac√≠os en message.answer()"""
        if cls._patched:
            return "‚úÖ Parche ya aplicado anteriormente"

        cls._original_answer = Message.answer
        Message.answer = cls._safe_answer
        cls._patched = True

        logging.info("‚úÖ Parche SafeMessage aplicado - textos vac√≠os ser√°n manejados autom√°ticamente")
        return "‚úÖ Parche aplicado exitosamente"

    @classmethod
    async def _safe_answer(cls, self, text, **kwargs):
        """M√©todo seguro que reemplaza message.answer()"""
        try:
            # Validar texto
            if not text or (isinstance(text, str) and text.strip() == ''):
                # Obtener informaci√≥n del caller
                frame = inspect.currentframe().f_back
                frame_info = inspect.getframeinfo(frame)
                caller_name = frame.f_code.co_name
                file_name = frame_info.filename.split('/')[-1]
                line_number = frame_info.lineno

                # Crear mensaje informativo
                safe_text = f"üìù Texto vac√≠o detectado\n\nüîç Origen: {caller_name}()\nüìÅ {file_name}:{line_number}"

                # Log del evento
                logging.warning(f"Texto vac√≠o parcheado desde: {caller_name}() [{file_name}:{line_number}]")

                return await cls._original_answer(self, safe_text, **kwargs)

            # Si el texto es v√°lido, usar m√©todo original
            return await cls._original_answer(self, text, **kwargs)

        except TelegramBadRequest as e:
            if "text must be non-empty" in str(e):
                # Fallback de emergencia
                emergency_text = "‚ö†Ô∏è Error: Mensaje sin contenido"
                logging.error(f"Error Telegram capturado y manejado: {e}")
                return await cls._original_answer(self, emergency_text, **kwargs)
            raise e

